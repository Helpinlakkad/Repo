{"ast":null,"code":"// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n\n// import App from './App';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect(\"mongodb://localhost:27017/studentsDB\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  rollNumber: Number,\n  department: String\n});\nconst Student = mongoose.model(\"Student\", studentSchema);\n\n// Routes\napp.get(\"/students\", async (req, res) => {\n  try {\n    const students = await Student.find();\n    res.json(students);\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\napp.post(\"/students\", async (req, res) => {\n  const student = new Student({\n    name: req.body.name,\n    rollNumber: req.body.rollNumber,\n    department: req.body.department\n  });\n  try {\n    const newStudent = await student.save();\n    res.status(201).json(newStudent);\n  } catch (err) {\n    res.status(400).json({\n      message: err.message\n    });\n  }\n});\napp.put(\"/students/:id\", async (req, res) => {\n  try {\n    const student = await Student.findById(req.params.id);\n    if (student) {\n      student.name = req.body.name || student.name;\n      student.rollNumber = req.body.rollNumber || student.rollNumber;\n      student.department = req.body.department || student.department;\n      const updatedStudent = await student.save();\n      res.json(updatedStudent);\n    } else {\n      res.status(404).json({\n        message: \"Student not found\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\napp.delete(\"/students/:id\", async (req, res) => {\n  try {\n    const deletedStudent = await Student.findByIdAndDelete(req.params.id);\n    if (deletedStudent) {\n      res.json({\n        message: \"Student deleted\"\n      });\n    } else {\n      res.status(404).json({\n        message: \"Student not found\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\nconst port = process.env.PORT || 5000;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","app","use","json","connect","useNewUrlParser","useUnifiedTopology","studentSchema","Schema","name","String","rollNumber","Number","department","Student","model","get","req","res","students","find","err","status","message","post","student","body","newStudent","save","put","findById","params","id","updatedStudent","delete","deletedStudent","findByIdAndDelete","port","process","env","PORT","listen","console","log"],"sources":["D:/react/Practice/exam/src/index.js"],"sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n\n// import App from './App';\n\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect(\"mongodb://localhost:27017/studentsDB\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  rollNumber: Number,\n  department: String,\n});\n\nconst Student = mongoose.model(\"Student\", studentSchema);\n\n// Routes\napp.get(\"/students\", async (req, res) => {\n  try {\n    const students = await Student.find();\n    res.json(students);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\napp.post(\"/students\", async (req, res) => {\n  const student = new Student({\n    name: req.body.name,\n    rollNumber: req.body.rollNumber,\n    department: req.body.department,\n  });\n\n  try {\n    const newStudent = await student.save();\n    res.status(201).json(newStudent);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\napp.put(\"/students/:id\", async (req, res) => {\n  try {\n    const student = await Student.findById(req.params.id);\n    if (student) {\n      student.name = req.body.name || student.name;\n      student.rollNumber = req.body.rollNumber || student.rollNumber;\n      student.department = req.body.department || student.department;\n\n      const updatedStudent = await student.save();\n      res.json(updatedStudent);\n    } else {\n      res.status(404).json({ message: \"Student not found\" });\n    }\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\napp.delete(\"/students/:id\", async (req, res) => {\n  try {\n    const deletedStudent = await Student.findByIdAndDelete(req.params.id);\n    if (deletedStudent) {\n      res.json({ message: \"Student deleted\" });\n    } else {\n      res.status(404).json({ message: \"Student not found\" });\n    }\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\nconst port = process.env.PORT || 5000;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}